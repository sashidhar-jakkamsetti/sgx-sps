/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    include "user_types.h" /* buffer_t */
    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;
    
    from "sgx_pthread.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;

  trusted {
    public uint32_t getNewORAMInstanceID(uint8_t oram_type);
    public uint8_t createNewORAMInstance(uint32_t instance_id, uint32_t maxBlocks, uint32_t dataSize, uint32_t stashSize, uint32_t oblivious_flag, uint32_t recursion_data_size, int8_t recursion_levels, uint8_t oram_type, uint8_t pZ);
    public uint32_t createNewLSORAMInstance(uint32_t key_size, uint32_t value_size, uint32_t num_blocks, uint8_t mem_mode, uint8_t oblivious_type, uint8_t dummy_populate);
 
    public void accessInterface(uint32_t instance_id, uint8_t oram_type, [in, size = request_size] unsigned char* encrypted_request, [out, size = response_size] unsigned char *encrypted_response, [in, size = tag_size] unsigned char *tag_in, [out, size = tag_size] unsigned char *tag_out, uint32_t request_size, uint32_t response_size, uint32_t tag_size);
    public void accessBulkReadInterface(uint32_t instance_id, uint8_t oram_type, uint32_t no_of_requests, [in, size = request_size] unsigned char* encrypted_request, [out, size = response_size] unsigned char *encrypted_response, [in, size = tag_size] unsigned char *tag_in, [out, size = tag_size] unsigned char *tag_out, uint32_t request_size, uint32_t response_size, uint32_t tag_size);
    public int8_t InitializeKeys([out, size = size_bin] unsigned char *bin_x, [out, size = size_bin] unsigned char* bin_y, [out, size = size_bin] unsigned char *bin_r, [out, size = size_bin] unsigned char *bin_s, uint32_t size_bin);  

    public int8_t LSORAMInsert(uint32_t instance_id, [in, size=request_size] unsigned char *encrypted_request, uint32_t request_size, 
           [in, size = tag_size] unsigned char* tag_in, uint32_t tag_size, 
           [in, size = pubkey_size] unsigned char *client_pubkey, uint32_t pubkey_size, uint32_t pubkey_size_x, uint32_t pubkey_size_y); 
    public int8_t LSORAMInsert_pt(uint32_t instance_id, [in, size = key_size] unsigned char *key, uint32_t key_size, 
       [in, size = value_size] unsigned char *value, uint32_t value_size);

    public int8_t LSORAMFetch(uint32_t instance_id, [in, size=request_size] unsigned char *encrypted_request, uint32_t request_size, 
           [out, size = response_size] unsigned char *encrypted_response, uint32_t response_size, [in, size = tag_size] unsigned char* tag_in, 
           [out, size = tag_size] unsigned char* tag_out, uint32_t tag_size, [in, size = pubkey_size] unsigned char *client_pubkey, 
           uint32_t pubkey_size, uint32_t pubkey_size_x, uint32_t pubkey_size_y); 


    public int8_t HSORAMInsert(uint32_t lsoram_iid, uint32_t oram_iid, uint8_t oram_type,
       uint64_t oram_index,
       [in , size = request_size] unsigned char *encrypted_request, uint32_t request_size,
       [in, size = tag_size] unsigned char *tag_in, 
       uint32_t tag_size, [in, size = pubkey_size] unsigned char *client_pubkey,
       uint32_t pubkey_size, uint32_t pubkey_size_x, uint32_t pubkey_size_y);

    public int8_t HSORAMFetch(uint32_t lsoram_iid, uint32_t oram_iid, uint8_t oram_type,
       [in , size = request_size] unsigned char *encrypted_request, uint32_t request_size,
       [out, size = response_size] unsigned char *encrypted_response, uint32_t response_size, 
       [in, size = tag_size] unsigned char *tag_in, [out, size = tag_size] unsigned char *tag_out, 
       uint32_t tag_size, [in, size = pubkey_size] unsigned char *client_pubkey,
       uint32_t pubkey_size, uint32_t pubkey_size_x, uint32_t pubkey_size_y);

    public int8_t LSORAMEvict(uint32_t instance_id, [in, size=key_size] unsigned char* key, uint32_t key_size);
    public uint8_t deleteLSORAMInstance(uint32_t instance_id);
 
    /*
    public uint32_t store_enclave_state([out,size = posmap_size] unsigned char* posmap, uint32_t posmap_size, [out, size = stash_size] unsigned char *stash, uint32_t stash_size, [out,size = hash_size] unsigned char* merkle_root, uint32_t hash_size);
   		public uint32_t restore_enclave_state(uint32_t maxBlocks, uint32_t dataSize, [in,size = posmap_size] uint32_t* posmap, uint32_t posmap_size, [in, size = stash_size] uint32_t *stash, uint32_t stash_size, [in,size=hash_size] unsigned char *merkle_root, uint32_t hash_size);
    public uint32_t storePosmapMerkleRoot([out,size = posmap_size] unsigned char* posmap, uint32_t posmap_size, [out,size = hash_and_key_size] unsigned char* merkle_root_and_aes_key, uint32_t hash_and_key_size);
    public uint32_t storeStashLevel([in,size = stash_size] unsigned char* stash, uint32_t stash_size, uint32_t level);
    */

/*  ================================================================================  */
/*               SCALABLE PRIVATE SIGNALING ___ CODE EDITS/FUNCTIONS                  */
/*  ================================================================================  */


    public int sps_ecall_init_service(
        int msg_nblocks, int msg_blocksize, int msg_stashsize, int msg_recursion_levels, 
        int recp_nblocks, int recp_blocksize, int recp_stashsize, int recp_recursion_levels, 
        int recursion_data_size, int bucket_size, int oram_type
    );

    // TODO: This call should ideally output an attestation report
    // to ensure authenticity of the enclave and verify the keys 
    public int sps_ecall_get_keys(
        [out, size=out_size] void* out_data, size_t out_size
    );

    public int sps_ecall_setup(
        [in, size=in_size] void* in_data, size_t in_size,
        [out, size=out_size] void* out_data, size_t out_size,
        [out, size=sig_size] void* sig_data, size_t sig_size
    );

    public int sps_ecall_send(
        [in, size=in_size] void* in_data, size_t in_size,
        [out, size=out_size] void* out_data, size_t out_size,
        [out, size=sig_size] void* sig_data, size_t sig_size
    );

    public int sps_ecall_receive(
        [in, size=in_size] void* in_data, size_t in_size,
        [out, size=out_size] void* out_data, size_t out_size,
        [out, size=sig_size] void* sig_data, size_t sig_size
    );

    public int sps_ecall_kill_service();

/*  ================================================================================  */

  };
    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    
  untrusted {
    void ocall_print_string([in, string] const char *str);
    unsigned char* getOutsidePtr_OCALL();
    void myprintf([in, size = buffer_size] char *buffer, uint32_t buffer_size);
    void* createLSORAM_OCALL(uint32_t id, uint32_t key_size, uint32_t value_size, uint32_t num_blocks_p, uint8_t oblv_mode);
    void build_fetchChildHash(uint32_t instance_id, uint8_t oram_type, uint32_t left, uint32_t right, [out, size=hash_size] unsigned char* lchild, [out, size=hash_size] unsigned char* rchild, uint32_t hash_size, uint32_t recursion_level);
    uint8_t uploadBucket_OCALL(uint32_t instance_id, uint8_t oram_type, [in,size = bucket_size] unsigned char* serialized_bucket, uint32_t bucket_size , uint32_t label, [in,size = hash_size] unsigned char* hash, uint32_t hash_size , uint32_t size_for_level, uint8_t recursion_level);
    uint8_t downloadBucket_OCALL(uint32_t instance_id, uint8_t oram_type, [out,size = bucket_size] unsigned char* serialized_bucket, uint32_t bucket_size , uint32_t label, [out,size = hash_size] unsigned char* hash, uint32_t hash_size, uint32_t size_for_level, uint8_t level);
    uint8_t downloadPath_OCALL(uint32_t instance_id, uint8_t oram_type, [out,size = path_size] unsigned char* serialized_path, uint32_t path_size , uint32_t label,[out,size = path_hash_size] unsigned char *path_hash, uint32_t path_hash_size, uint8_t level, uint32_t D_lev);
    uint8_t uploadPath_OCALL(uint32_t instance_id, uint8_t oram_type, [in,size = path_size] unsigned char* serialized_path, uint32_t path_size , uint32_t label, [in,size = path_hash_size] unsigned char *path_hash, uint32_t path_hash_size, uint8_t level, uint32_t D_level);
    void time_report(int report_type, uint8_t level);
    //void ReturnResult([unsigned char *return_data, unsigned]);
  };

};
